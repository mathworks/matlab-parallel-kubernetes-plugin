# Starting in R2023a, MATLAB can discover clusters running third-party
# schedulers such as Kubernetes. The Discover Clusters functionality
# automatically configures the Parallel Computing Toolbox to submit MATLAB
# jobs to the cluster. To use this functionality, you must create a cluster
# configuration file and store it at a location accessible to MATLAB users.
#
# This file is an example of a cluster configuration which MATLAB can
# discover. You can copy and modify this file to make your cluster discoverable.
#
# For more information, including the required format for this file, see
# the online documentation for making a cluster running a third-party
# scheduler discoverable:
# https://www.mathworks.com/help/matlab-parallel-server/configure-for-cluster-discovery.html

# Copyright 2023 The MathWorks, Inc.

# The name MATLAB will display for the cluster when discovered.
Name = My Kubernetes Cluster

# Maximum number of MATLAB workers a single user can use in a single job.
# This number must not exceed the number of available MATLAB Parallel
# Server licenses.
NumWorkers = 32

# Folder that contains the scheduler plugin scripts that describe how
# MATLAB interacts with the scheduler. To set operating system specific values
# for a property, you can include the operating system in parentheses.
PluginScriptsLocation (Windows) = \\organization\matlab\pluginscripts
PluginScriptsLocation (Unix) = /organization/matlab/pluginscripts

# Location where the MATLAB client stores job and task information.
JobStorageLocation (Windows) = "$USERPROFILE"\matlabjobs
JobStorageLocation (Unix) = "$HOME"/matlabjobs

# The operating system on the cluster. This is always 'unix' for Kubernetes.
OperatingSystem = unix

# Specify whether the client and cluster nodes share JobStorageLocation. This
# is always false for Kubernetes.
HasSharedFilesystem = false

# Specify whether the cluster uses online licensing.
RequiresOnlineLicensing = false

# LicenseNumber for the workers to use. Specify only if
# RequiresOnlineLicensing is set to true.
#LicenseNumber = 123456

[AdditionalProperties]

# The URI or name of the Docker image to use for the MATLAB Parallel Server
# workers.
Image = my-parallel-server-image

# The image pull policy. If the image is available locally on the cluster, set
# this property to "Never". If you are hosting the image remotely, set this
# property to "Always".
ImagePullPolicy = Always

# Name of the Kubernetes PersistentVolumeClaim containing the job storage
# location.
JobStoragePVC = pvc-jobstorage

# Path to the job storage location within the PersistentVolumeClaim
JobStoragePath = /

# User ID of the user account on the cluster that workers should run as.
ClusterUserID = 1000

# Group ID of the user account on the cluster that workers should run as.
ClusterGroupID = 10000

# Kubernetes namespace in which to run MATLAB Parallel Server jobs.
Namespace = matlab

# If the cluster shares a MATLAB and MATLAB Parallel Server installation via
# a PersistentVolumeClaim, uncomment the following lines and set the name of
# the PersistentVolumeClaim and the path to the MATLAB root within the
# PersistentVolumeClaim.
#MatlabPVC = pvc-matlab
#MatlabPath = /

# If your KubeConfig file is not in the default location ($HOME/.kube/config),
# uncomment this line and set the path to your KubeConfig file.
#KubeConfig = /my/kube/config

# To use a non-default context within your KubeConfig file, uncomment this line
# and set the name of the context to use.
#KubeContext = my-context

# If you use a Network License Manager, uncomment the following line and
# enter the port and hostname of the machine in the format port@hostname.
#LicenseServer = 123@hostname

# To specify a custom value for the time that MATLAB waits for all worker
# pods in a communicating job to start running, uncomment the following line
# and set the timeout in seconds.
#Timeout = 600
